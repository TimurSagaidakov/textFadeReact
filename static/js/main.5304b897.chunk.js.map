{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","useEffect","document","querySelector","scrollIntoView","body","addEventListener","typing","e","key","toUpperCase","length","slice","removeEventListener","textArr","split","className","TransitionGroup","map","t","index","CSSTransition","classNames","timeout","enter","exit","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOA6CeA,G,MA1CH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,KAEhBC,qBAAU,WAkBRC,SAASC,cAAc,aAAaC,gBAAe,GACnDF,SAASG,KAAKC,iBAAiB,WAlBhB,SAATC,EAAUC,GACd,IAAIC,EAAMD,EAAEC,IAAIC,cAChB,MAAa,cAAVF,EAAEC,KAAuBV,EAAKY,OAAO,GACtCX,EAAQD,EAAKa,MAAM,GAAG,IACfV,SAASG,KAAKQ,oBAAoB,UAAWN,IAEpC,IAAfE,EAAIE,SAGWF,GAAO,KAAOA,GAAM,KACpBA,GAAO,UAAOA,GAAO,UACA,WAARA,IAC7BT,EAAQD,EAAOU,GACRP,SAASG,KAAKQ,oBAAoB,UAAWN,SAPtD,OAaF,CAACR,IACH,IAAIe,EAAUf,EAAKgB,MAAM,IACzB,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,UACCH,EAAQI,KAAI,SAACC,EAAEC,GAAH,OACX,cAACC,EAAA,EAAD,CAAeC,WAAW,OAAOC,QAAS,CAAEC,MAAO,IAAMC,KAAM,KAA/D,SACE,qBAAKT,UAAU,YAAf,SAA6BG,KAD4CC,QAK/E,qBAAKJ,UAAU,WACf,sBAAKA,UAAU,WAAf,2GACsBjB,GAAY,oGAElC,mBAAI2B,KAAK,mDAAmDV,UAAU,OAAtE,kIC5BWW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BZ,M","file":"static/js/main.5304b897.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './App.css';\nconst App = () => {\n  const [text, setText] = useState('')              // Вводим переменную для текста, введенного с клавиатуры\n  useEffect(()=>{\n    const typing = (e) =>{\n      let key = e.key.toUpperCase()                 // Приводим к верхнему регистру для простоты сравнения\n      if(e.key === 'Backspace' && text.length>0){   // Если нажата клавиша backspace,\n        setText(text.slice(0,-1))                   // Удаляем последний символ\n        return document.body.removeEventListener(\"keydown\", typing) // Отписываемся от события, чтобы не завис браузер\n      }\n      if(key.length !== 1){                         // Отсеиваем нажатия на клавиши alt, shift, tab, enter и т.д.\n        return \n      }\n      let isEnglish = ( key >= 'A' && key<= 'Z')    // Проверяем введенный символ на англ. буквы\n      let isRussian = ( key >= 'А' && key <= 'Я')   // Проверяем введенный символ на русские буквы\n      if( isEnglish ||  isRussian || key === \"Ё\"){  // Куда же без Ё ?))\n        setText(text + key);                        // Добавляем введенный символ в переменную объявленную в строке 5\n        return document.body.removeEventListener(\"keydown\", typing) // Отписываемся от события, чтобы не завис браузер\n      }\n      \n    }\n    document.querySelector('.fullText').scrollIntoView(false)                // Прокрутка до конца body\n    document.body.addEventListener(\"keydown\", typing);      // Подписываемся на событие и выполняем функцию\n  },[text])                                                 // Зависимость для обновления компонента\n  let textArr = text.split('')                              // Разбиваем строку на массив для функции map\n  return (\n    <div className=\"App\">\n      <TransitionGroup>                                     \n      {textArr.map((t,index)=>(                             \n        <CSSTransition classNames='fade' timeout={{ enter: 3000, exit: 500 }} key={index} >   \n          <div className='addedText' >{t}</div> \n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n    <div className='cursor'></div>                          \n    <div className='fullText'>                \n      Написанное слово : {text?text : \" Вы ничего не ввели\"}                             \n    </div>\n    <a  href='https://github.com/TimurSagaidakov/textFadeReact' className='code'> Исходники на гитхабе</a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}